// Code generated by mockery v2.32.2. DO NOT EDIT.

package mocks

import (
	label "github.com/Mellanox/nic-feature-discovery/pkg/label"
	mock "github.com/stretchr/testify/mock"
)

// Feature is an autogenerated mock type for the Feature type
type Feature struct {
	mock.Mock
}

type Feature_Expecter struct {
	mock *mock.Mock
}

func (_m *Feature) EXPECT() *Feature_Expecter {
	return &Feature_Expecter{mock: &_m.Mock}
}

// Labels provides a mock function with given fields:
func (_m *Feature) Labels() []label.Label {
	ret := _m.Called()

	var r0 []label.Label
	if rf, ok := ret.Get(0).(func() []label.Label); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]label.Label)
		}
	}

	return r0
}

// Feature_Labels_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Labels'
type Feature_Labels_Call struct {
	*mock.Call
}

// Labels is a helper method to define mock.On call
func (_e *Feature_Expecter) Labels() *Feature_Labels_Call {
	return &Feature_Labels_Call{Call: _e.mock.On("Labels")}
}

func (_c *Feature_Labels_Call) Run(run func()) *Feature_Labels_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Feature_Labels_Call) Return(_a0 []label.Label) *Feature_Labels_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Feature_Labels_Call) RunAndReturn(run func() []label.Label) *Feature_Labels_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function with given fields:
func (_m *Feature) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Feature_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type Feature_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *Feature_Expecter) Name() *Feature_Name_Call {
	return &Feature_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *Feature_Name_Call) Run(run func()) *Feature_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Feature_Name_Call) Return(_a0 string) *Feature_Name_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Feature_Name_Call) RunAndReturn(run func() string) *Feature_Name_Call {
	_c.Call.Return(run)
	return _c
}

// NewFeature creates a new instance of Feature. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFeature(t interface {
	mock.TestingT
	Cleanup(func())
}) *Feature {
	mock := &Feature{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
